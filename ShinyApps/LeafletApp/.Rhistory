(233*3.3 + 4*30) / (233 + 30)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
R.Version()
mtcars
glimpse(mtcars)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
glimpse(mtcars)
mtcars?
?mtcars
x <- c(1,2,3)
y <- c(6,7,8)
plot(x,y)
x <- seq(1,10,1)
y <- x^2
plot(x,y)
qplot(x,y)
ggplot(data = data.frame(x,y), aes(x,y)) + geom_point()
qplot(x,y) + geom_point()
qplot(x,y) + geom_point(colour = "red")
plot(x,y)
gg <- ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point()
gg
gg <- ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point(shape = 1)
ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point(shape = 1)
ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point(shape = 1, lineweihgt = 2)
ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point(shape = 1, lineweight = 2)
ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point(shape = 1, size = 2)
ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl))) + geom_point(shape = 1, size = 10)
ggplot(mtcars, aes(x = wt, y = mpg, fill = factor(cyl))) + geom_point(shape = 1, size = 10)
ggplot(mtcars, aes(x = wt, y = mpg, fill = factor(cyl))) + geom_point(shape = 2, size = 10)
ggplot(mtcars, aes(x = wt, y = mpg, fill = factor(cyl))) + geom_point(shape = 0, size = 10)
ggplot(mtcars, aes(x = wt, y = mpg, fill = factor(cyl))) + geom_point(shape = -1, size = 10)
ggplot(mtcars, aes(x = wt, y = mpg, fill = factor(cyl))) + geom_point(shape = 4, size = 10)
ggplot(mtcars, aes(x = wt, y = mpg, fill = factor(cyl))) + geom_point(size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, group = factor(cyl), fill = factor(cyl))) + geom_point(size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, group = factor(cyl), colour = factor(cyl))) + geom_point(size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, size = factor(cyl))) + geom_point(size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, size = factor(cyl))) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, alpha = factor(cyl))) + geom_point()
1.125^18
1000000/(1.125^18)
(1000000/(1.125^18))*(1.125^18 - 1.125^17)
ans*18
(1000000/(1.125^18))*(1.125^18 - 1.125^17)*18
a = (1000000/(1.125^18))*(1.125^18 - 1.125^17)
1.125-1
1/.125
a = (1000000/(1.125^18))
a = (1000000 - (1.125^18))/8
a
9/1.125
8*1.125^18
b = 8*1.125^18
(1000000 - b)/8
9*1.125^18 - 8
a = 9*1.125^18 - 8
1000000/a
13-4.2
install.packages("epicalc")  #the library "epicalc" has a nice likekihood ratio test for convenience
library("rattle")
install.packages("rattle")
install.packages("rattle")
library(rattle)
rattle()
library(rattle)
rattle()
install.packages(plyr)
install.packages("plyr")
library(plyr)
?baseball
baseball$id
head(baseball)
install.packages("rmarkdown")
a <- c(1,60,60*60,24*60*60, 30*24*60*60, 12*30*24*60*60, 100*12*30*24*60*60 )
log2(a)
2^(a)
2^(a)*10^(-6)
2^(a*10^(-6))
2^(a*10^(6))
(a*10^(6)^2
(a*10^(6)^2
Amelia
library(Amelia)
install.packages()
install.packages("Amelia")
library(Amelia)
freetrade
data(freetrade)
qqplot
?qqplot
rnorm(100)
x <- rnorm(100)
qqplot(x)
y <- rnorm(1000)
x <- rnorm(100)
qqplot(x)
qqplot(x,y)
qqline(y)
y <- rchisq(500, df = 3)
## Q-Q plot for Chi^2 data against true theoretical distribution:
qqplot(qchisq(ppoints(500), df = 3), y,
main = expression("Q-Q plot for" ~~ {chi^2}[nu == 3]))
qqline(y, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
mtext("qqline(*, dist = qchisq(., df=3), prob = c(0.1, 0.6))")
y <- rchisq(500, df = 3)
## Q-Q plot for Chi^2 data against true theoretical distribution:
qqplot(qchisq(ppoints(500), df = 3), y,
main = expression("Q-Q plot for" ~~ {chi^2}[nu == 3]))
qqline(y, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
mtext("qqline(*, dist = qchisq(., df=3), prob = c(0.1, 0.6))")
Annie <- c(3.15,5.46,3.28,4.2,1.98,2.28,3.12,4.1,3.42,3.91,2.06,5.53,
5.19,2.39,1.88,3.43,5.51,2.54,3.64,4.33,4.85,5.56,1.89,4.84,5.74,3.22,
5.52,1.84,4.31,2.01,4.01,5.31,2.56,5.11,2.58,4.43,4.96,1.9,5.6,1.92)
Brian <- c(2.9, 5.21, 3.03, 3.95, 1.73, 2.03, 2.87, 3.85, 3.17, 3.66,
1.81, 5.28, 4.94, 2.14, 1.63, 3.18, 5.26, 2.29, 3.39, 4.08, 4.6,
5.31, 1.64, 4.59, 5.49, 2.97, 5.27, 1.59, 4.06, 1.76, 3.76, 5.06,
2.31, 4.86, 2.33, 4.18, 4.71, 1.65, 5.35, 1.67)
Chris <- c(2.65, 4.96, 2.78, 3.7, 1.48, 1.78, 2.62, 3.6, 2.92, 3.41, 1.56,
5.03, 4.69, 1.89, 1.38, 2.93, 5.01, 2.04, 3.14, 3.83, 4.35, 5.06,
1.39, 4.34, 5.24, 2.72, 5.02, 1.34, 3.81, 1.51, 3.51, 4.81, 2.06,
4.61, 2.08, 3.93, 4.46, 1.4, 5.1, 1.42)
Zoe <- c(2.4, 4.71, 2.53, 3.45, 1.23, 1.53, 2.37, 3.35, 2.67, 3.16,
1.31, 4.78, 4.44, 1.64, 1.13, 2.68, 4.76, 1.79, 2.89, 3.58, 4.1,
4.81, 1.14, 4.09, 4.99, 2.47, 4.77, 1.09, 3.56, 1.26, 3.26, 4.56,
1.81, 4.36, 1.83, 3.68, 4.21, 1.15, 4.85, 1.17)
opar<-par()
par(mfrow=c(2,2))
hist(Annie,breaks=1:6,main="Annie",xlab="V1",col="lightblue")
hist(Brian,breaks=1:6,main="Brian",xlab="V2",col="lightblue")
hist(Chris,breaks=1:6,main="Chris",xlab="V3",col="lightblue")
hist(Zoe,breaks=1:6,main="Zoe",xlab="V4",col="lightblue")
par(opar)
x<-c(Annie,Brian,Chris,Zoe)
g<-rep(c('A','B','C','Z'),each=40)
stripchart(x~g,pch='|')
abline(v=(5:23)/4,col=8,lty=3)
abline(v=(2:5),col=6,lty=3)
?stripchart
qnorm(x)
set.seed(42)
x <- rnorm(100)
qqnorm(x); qqline(x)
x <- rnorm(100)
qqnorm(x)
qqline(x)
qqnorm(x)
qqnorm(x); qqline(x)
qqnorm(x)
qqplot(x,rexp(1292))
qqplot(x,rexp(1292))
set.seed(42)
theorethical <- rexp(1292)
qqplot(x,theorethical)
x <- rnorm(100)
y <- rexp(1000)
qqplot(x,y)
qqline(y)
qqplot(x,y)
qqline(x)
eigen(corr(mtcars))
?cor
eigen(cor(mtcars))
cor(mtcars)
eigen(cor(mtcars))
prcomp(mtcars)
eigen(scale(cor(mtcars)))
princomp(mtcars)
eigen(cor(mtcars))
eigen(cov(mtcars))
?prcomp
prcomp(mtcars, scale = T)
eigen(cor(scale((mtcars)))
eigen(cor(scale((mtcars)))
eigen(cor(scale((mtcars))))
exp(dinvexp(2, 2, log = TRUE))
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
set.seed(1234)
testData = rnorm(1000)
fit <- fitdist(testData, "norm")
fit
plot(fit)
gofstat(fit)
ks.test(testData , "pnorm")
ks.test(testData , "pnorm")
gofstat(fit)
ks.test(testData , "pnorm", alternative = "less")
gofstat(fit)
gg <- gofstat(fit)
gg
summary(gg)
gg
gg
gg$ks
gg$kstest
test2 = rexp(1000)
ex <- rexp(10000, rate = 1.85) # generate some exponential distribution
control <- abs(rnorm(10000)) # generate some other distribution
fit1 <- fitdistr(ex, "exponential")
fitdistr
?fitdistr
fit1
fit2 <- fitdistr(control, "exponential")
fit1$estimate
fit1$n
fit1$sd
fit1$loglik
fit1$estimate
?exprnd
?rexp
ex <- rexp(10000, rate = .85) # generate some exponential distribution
fit1 <- fitdistr(ex, "exponential")
fit1
head(ex)
factorial(5)
factorial(3)
library(ggplot2)
x <- seq(4,16)
y <- (factorial(x) - s_n(n))/factorial(x)
s_n <- function(n){
result <- sqrt(2*pi) * n^(n + 0.5)/ factorial(n)
return(result)
}
library(ggplot2)
x <- seq(4,16)
y <- (factorial(x) - s_n(n))/factorial(x)
s_n <- function(n){
result <- sqrt(2*pi) * n^(n + 0.5)/ factorial(n)
return(result)
}
library(ggplot2)
x <- seq(4,16)
y <- (factorial(x) - s_n(x))/factorial(x)
y
e
exp(1)
exp(2)
exp(1)^2
s_n <- function(n){
result <- sqrt(2*pi) * n^(n + 0.5)/ exp(n)
return(result)
}
library(ggplot2)
x <- seq(4,16)
y <- (factorial(x) - s_n(x))/factorial(x)
y
ggplot(aes(x=x, y=y))
y
class(x)
class(y)
ggplot(data.frame(x,y), aes(x=x, y=y))
ggplot(data.frame(x,y), aes(x=x, y=y)) = geom_point()
ggplot(data.frame(x,y), aes(x=x, y=y)) + geom_point()
ggplot(data.frame(x,y), aes(x=x, y=y)) + geom_point() + theme_classic()
ggplot(data.frame(x,y), aes(x=x, y=y)) + geom_point() + theme_economist()
ggplot(data.frame(x,y), aes(x=x, y=y)) + geom_point() + theme_few() + scale_colour_few()
ggplot(data.frame(x,e), aes(x=x, y=e)) + geom_point() + theme_classic()
s_n <- function(n){
result <- sqrt(2*pi) * n^(n + 0.5)/ exp(n)
return(result)
}
library(ggplot2)
x <- seq(4,16)
e <- (factorial(x) - s_n(x))/factorial(x)
ggplot(data.frame(x,e), aes(x=x, y=e)) + geom_point() + theme_classic()
2^c(seq(1,20))
-4/10*(3/2*log2(3/4)+1/4*log2(1/4)) - 3/10*(2/3*log2(2/3)+1/3*log2(1/3)) -3/10*(1/3*log2(1/3)+2/3*log2(2/3))
-4/10*(3/2*log2(3/4)+1/4*log2(1/4)) - 3/10*(2/3*log2(2/3)+1/3*log2(1/3)) -3/10*(1/3*log2(1/3)+2/3*log2(2/3)) +1
-4/10*(3/2*log2(3/4)+1/4*log2(1/4)) - 3/10*(2/3*log2(2/3)+1/3*log2(1/3)) -3/10*(1/3*log2(1/3)+2/3*log2(2/3))
-4/10*(3/2*log2(3/4)+1/4*log2(1/4)) - 3/10*(2/3*log2(2/3)+1/3*log2(1/3)) -3/10*(1/3*log2(1/3)+2/3*log2(2/3))
-4/10*(3/2*log2(3/4)+1/4*log2(1/4)) - 3/10*(2/3*log2(2/3)+1/3*log2(1/3))
-4/10*(3/2*log2(3/4)+1/4*log2(1/4))
3/10*(1/3*log2(1/3)+2/3*log2(2/3))
-4/10*(3/2*log2(3/4)+1/4*log2(1/4))
3/10*(2/3*log2(2/3)+1/3*log2(1/3))
-0.4*(1.5*log2(3/4)+1/4*log2(1/4))
-(4/10*log2(4/10)-6/10*log2(6/10))
-(4/10*log(4/10)-6/10*log(6/10))
-(4/10*log10(4/10)-6/10*log10(6/10))
-(4/10*log2(4/10)-6/10*log2(6/10))
-(4/10*log2(4/10)+6/10*log2(6/10))
-4/10*(3/2*log2(3/4) + 1/4*log2(1/4)) - 3/10*(2/3*log2(2/3)+1/3*log2(1/3)) -3/10*(1/3*log2(1/3)+2/3*log2(2/3))
-5/10*(3/5*log2(3/5) + 2/5*log2(2/5))
-6/10*(2/6*log2(2/6) + 4/6*log2(4/6))
help("~")
shiny::runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
runApp('C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp')
library(dplyr)
library(rgeos)
library(rgdal)
shapefile_path <- "shapefiles"
terrestrial_mammals <- readOGR(shapefile_path, "TERRESTRIAL_MAMMALS", verbose = T) %>%
spTransform(CRS("+ellps=WGS84 +proj=longlat +datum=WGS84 +no_defs"))
# read the TEAM data
Primary <- read.csv("team_rate_of_detection.csv", header = TRUE)
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if ( length(grep( as.character(terrestrial_mammals$binomial)[i] , as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
new_terrestrial_mammals <- terrestrial_mammals[indices,]
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
####
# subset_terrestrial_mammals.R
# This shrinks the huge terrestrial mammals shapefile dataset and takes only the species that are in our data
# As it is terrestrial mammals, this was done only to TEAM dataset
# From 600 Mb to 100 Mb
library(dplyr)
library(rgeos)
library(rgdal)
shapefile_path <- "/shapefiles"
terrestrial_mammals <- readOGR(shapefile_path, "TERRESTRIAL_MAMMALS", verbose = T) %>%
spTransform(CRS("+ellps=WGS84 +proj=longlat +datum=WGS84 +no_defs"))
# read the TEAM data
Primary <- read.csv("/team_rate_of_detection.csv", header = TRUE)
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if ( length(grep( as.character(terrestrial_mammals$binomial)[i] , as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
new_terrestrial_mammals <- terrestrial_mammals[indices,]
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
setwd("C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp/data")
setwd("C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/rscripts")
####
# subset_terrestrial_mammals.R
# This shrinks the huge terrestrial mammals shapefile dataset and takes only the species that are in our data
# As it is terrestrial mammals, this was done only to TEAM dataset
# From 600 Mb to 100 Mb
library(dplyr)
library(rgeos)
library(rgdal)
shapefile_path <- "/shapefiles"
terrestrial_mammals <- readOGR(shapefile_path, "TERRESTRIAL_MAMMALS", verbose = T) %>%
spTransform(CRS("+ellps=WGS84 +proj=longlat +datum=WGS84 +no_defs"))
# read the TEAM data
Primary <- read.csv("/team_rate_of_detection.csv", header = TRUE)
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if ( length(grep( as.character(terrestrial_mammals$binomial)[i] , as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
new_terrestrial_mammals <- terrestrial_mammals[indices,]
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
####
# subset_terrestrial_mammals.R
# This shrinks the huge terrestrial mammals shapefile dataset and takes only the species that are in our data
# As it is terrestrial mammals, this was done only to TEAM dataset
# From 600 Mb to 100 Mb
library(dplyr)
library(rgeos)
library(rgdal)
shapefile_path <- "shapefiles"
terrestrial_mammals <- readOGR(shapefile_path, "TERRESTRIAL_MAMMALS", verbose = T) %>%
spTransform(CRS("+ellps=WGS84 +proj=longlat +datum=WGS84 +no_defs"))
# read the TEAM data
Primary <- read.csv("team_rate_of_detection.csv", header = TRUE)
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if ( length(grep( as.character(terrestrial_mammals$binomial)[i] , as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
new_terrestrial_mammals <- terrestrial_mammals[indices,]
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
new_terrestrial_mammals
indices
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if ( as.character(terrestrial_mammals$binomial)[i] %in% as.factor(Primary$newBinomial) )
indices <- c(indices,i)
}
indices
indices<-c()
indices
c(indices, 2)
c
indices
indices =c(indices, 2)
indices
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if (length(grep( as.character(terrestrial_mammals$binomial)[i], as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
nrow(terrestrial_mammals)
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if (length(grep( as.character(terrestrial_mammals$binomial)[i], as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
library(tidyr)
Primary <- unite(Primary, "newBinomial", Genus, Species, sep =" ",remove = FALSE)
head(Primary)
indices<-c()
for(i in 1:nrow(terrestrial_mammals)){
if (length(grep( as.character(terrestrial_mammals$binomial)[i], as.factor(Primary$newBinomial) , ignore.case=TRUE , value=TRUE))>0)
indices <- c(indices,i)
}
indices
new_terrestrial_mammals <- terrestrial_mammals[indices,]
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
new_terrestrial_mammals
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="temp", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
writeOGR(layer_options = "RESIZE=YES" , obj=new_terrestrial_mammals, dsn="shrinked_data", layer="new_terrestrial_mammals", driver="ESRI Shapefile" )
setwd("C:/Users/owner/OneDrive - University of Oklahoma/Data Hack/ShinyCam/ShinyApps/LeafletApp")
runApp()
